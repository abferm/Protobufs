// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

package kinesis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Tag struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Tag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Record struct {
	PartitionKeyIndex    *uint64 `protobuf:"varint,1,req,name=partition_key_index" json:"partition_key_index,omitempty"`
	ExplicitHashKeyIndex *uint64 `protobuf:"varint,2,opt,name=explicit_hash_key_index" json:"explicit_hash_key_index,omitempty"`
	Data                 []byte  `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	Tags                 []*Tag  `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Record) GetPartitionKeyIndex() uint64 {
	if m != nil && m.PartitionKeyIndex != nil {
		return *m.PartitionKeyIndex
	}
	return 0
}

func (m *Record) GetExplicitHashKeyIndex() uint64 {
	if m != nil && m.ExplicitHashKeyIndex != nil {
		return *m.ExplicitHashKeyIndex
	}
	return 0
}

func (m *Record) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Record) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AggregatedRecord struct {
	PartitionKeyTable    []string  `protobuf:"bytes,1,rep,name=partition_key_table" json:"partition_key_table,omitempty"`
	ExplicitHashKeyTable []string  `protobuf:"bytes,2,rep,name=explicit_hash_key_table" json:"explicit_hash_key_table,omitempty"`
	Records              []*Record `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
	XXX_unrecognized     []byte    `json:"-"`
}

func (m *AggregatedRecord) Reset()                    { *m = AggregatedRecord{} }
func (m *AggregatedRecord) String() string            { return proto.CompactTextString(m) }
func (*AggregatedRecord) ProtoMessage()               {}
func (*AggregatedRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AggregatedRecord) GetPartitionKeyTable() []string {
	if m != nil {
		return m.PartitionKeyTable
	}
	return nil
}

func (m *AggregatedRecord) GetExplicitHashKeyTable() []string {
	if m != nil {
		return m.ExplicitHashKeyTable
	}
	return nil
}

func (m *AggregatedRecord) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type Message struct {
	Id       *uint64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	SourceId *uint64 `protobuf:"varint,2,opt,name=source_id" json:"source_id,omitempty"`
	// Types that are valid to be assigned to ActualMessage:
	//	*Message_PutRecord
	//	*Message_Flush
	//	*Message_PutRecordResult
	//	*Message_Configuration
	//	*Message_MetricsRequest
	//	*Message_MetricsResponse
	//	*Message_SetCredentials
	ActualMessage    isMessage_ActualMessage `protobuf_oneof:"actual_message"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type isMessage_ActualMessage interface {
	isMessage_ActualMessage()
}

type Message_PutRecord struct {
	PutRecord *PutRecord `protobuf:"bytes,3,opt,name=put_record,oneof"`
}
type Message_Flush struct {
	Flush *Flush `protobuf:"bytes,4,opt,name=flush,oneof"`
}
type Message_PutRecordResult struct {
	PutRecordResult *PutRecordResult `protobuf:"bytes,5,opt,name=put_record_result,oneof"`
}
type Message_Configuration struct {
	Configuration *Configuration `protobuf:"bytes,6,opt,name=configuration,oneof"`
}
type Message_MetricsRequest struct {
	MetricsRequest *MetricsRequest `protobuf:"bytes,7,opt,name=metrics_request,oneof"`
}
type Message_MetricsResponse struct {
	MetricsResponse *MetricsResponse `protobuf:"bytes,8,opt,name=metrics_response,oneof"`
}
type Message_SetCredentials struct {
	SetCredentials *SetCredentials `protobuf:"bytes,9,opt,name=set_credentials,oneof"`
}

func (*Message_PutRecord) isMessage_ActualMessage()       {}
func (*Message_Flush) isMessage_ActualMessage()           {}
func (*Message_PutRecordResult) isMessage_ActualMessage() {}
func (*Message_Configuration) isMessage_ActualMessage()   {}
func (*Message_MetricsRequest) isMessage_ActualMessage()  {}
func (*Message_MetricsResponse) isMessage_ActualMessage() {}
func (*Message_SetCredentials) isMessage_ActualMessage()  {}

func (m *Message) GetActualMessage() isMessage_ActualMessage {
	if m != nil {
		return m.ActualMessage
	}
	return nil
}

func (m *Message) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Message) GetSourceId() uint64 {
	if m != nil && m.SourceId != nil {
		return *m.SourceId
	}
	return 0
}

func (m *Message) GetPutRecord() *PutRecord {
	if x, ok := m.GetActualMessage().(*Message_PutRecord); ok {
		return x.PutRecord
	}
	return nil
}

func (m *Message) GetFlush() *Flush {
	if x, ok := m.GetActualMessage().(*Message_Flush); ok {
		return x.Flush
	}
	return nil
}

func (m *Message) GetPutRecordResult() *PutRecordResult {
	if x, ok := m.GetActualMessage().(*Message_PutRecordResult); ok {
		return x.PutRecordResult
	}
	return nil
}

func (m *Message) GetConfiguration() *Configuration {
	if x, ok := m.GetActualMessage().(*Message_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (m *Message) GetMetricsRequest() *MetricsRequest {
	if x, ok := m.GetActualMessage().(*Message_MetricsRequest); ok {
		return x.MetricsRequest
	}
	return nil
}

func (m *Message) GetMetricsResponse() *MetricsResponse {
	if x, ok := m.GetActualMessage().(*Message_MetricsResponse); ok {
		return x.MetricsResponse
	}
	return nil
}

func (m *Message) GetSetCredentials() *SetCredentials {
	if x, ok := m.GetActualMessage().(*Message_SetCredentials); ok {
		return x.SetCredentials
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_PutRecord)(nil),
		(*Message_Flush)(nil),
		(*Message_PutRecordResult)(nil),
		(*Message_Configuration)(nil),
		(*Message_MetricsRequest)(nil),
		(*Message_MetricsResponse)(nil),
		(*Message_SetCredentials)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// actual_message
	switch x := m.ActualMessage.(type) {
	case *Message_PutRecord:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutRecord); err != nil {
			return err
		}
	case *Message_Flush:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Flush); err != nil {
			return err
		}
	case *Message_PutRecordResult:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutRecordResult); err != nil {
			return err
		}
	case *Message_Configuration:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Configuration); err != nil {
			return err
		}
	case *Message_MetricsRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MetricsRequest); err != nil {
			return err
		}
	case *Message_MetricsResponse:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MetricsResponse); err != nil {
			return err
		}
	case *Message_SetCredentials:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCredentials); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.ActualMessage has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // actual_message.put_record
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRecord)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_PutRecord{msg}
		return true, err
	case 4: // actual_message.flush
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Flush)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_Flush{msg}
		return true, err
	case 5: // actual_message.put_record_result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRecordResult)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_PutRecordResult{msg}
		return true, err
	case 6: // actual_message.configuration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Configuration)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_Configuration{msg}
		return true, err
	case 7: // actual_message.metrics_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MetricsRequest)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_MetricsRequest{msg}
		return true, err
	case 8: // actual_message.metrics_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MetricsResponse)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_MetricsResponse{msg}
		return true, err
	case 9: // actual_message.set_credentials
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetCredentials)
		err := b.DecodeMessage(msg)
		m.ActualMessage = &Message_SetCredentials{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// actual_message
	switch x := m.ActualMessage.(type) {
	case *Message_PutRecord:
		s := proto.Size(x.PutRecord)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Flush:
		s := proto.Size(x.Flush)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PutRecordResult:
		s := proto.Size(x.PutRecordResult)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Configuration:
		s := proto.Size(x.Configuration)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_MetricsRequest:
		s := proto.Size(x.MetricsRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_MetricsResponse:
		s := proto.Size(x.MetricsResponse)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SetCredentials:
		s := proto.Size(x.SetCredentials)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PutRecord struct {
	StreamName       *string `protobuf:"bytes,1,req,name=stream_name" json:"stream_name,omitempty"`
	PartitionKey     *string `protobuf:"bytes,2,req,name=partition_key" json:"partition_key,omitempty"`
	ExplicitHashKey  *string `protobuf:"bytes,3,opt,name=explicit_hash_key" json:"explicit_hash_key,omitempty"`
	Data             []byte  `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PutRecord) Reset()                    { *m = PutRecord{} }
func (m *PutRecord) String() string            { return proto.CompactTextString(m) }
func (*PutRecord) ProtoMessage()               {}
func (*PutRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PutRecord) GetStreamName() string {
	if m != nil && m.StreamName != nil {
		return *m.StreamName
	}
	return ""
}

func (m *PutRecord) GetPartitionKey() string {
	if m != nil && m.PartitionKey != nil {
		return *m.PartitionKey
	}
	return ""
}

func (m *PutRecord) GetExplicitHashKey() string {
	if m != nil && m.ExplicitHashKey != nil {
		return *m.ExplicitHashKey
	}
	return ""
}

func (m *PutRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Flush struct {
	StreamName       *string `protobuf:"bytes,1,opt,name=stream_name" json:"stream_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Flush) Reset()                    { *m = Flush{} }
func (m *Flush) String() string            { return proto.CompactTextString(m) }
func (*Flush) ProtoMessage()               {}
func (*Flush) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Flush) GetStreamName() string {
	if m != nil && m.StreamName != nil {
		return *m.StreamName
	}
	return ""
}

type Attempt struct {
	Delay            *uint32 `protobuf:"varint,1,req,name=delay" json:"delay,omitempty"`
	Duration         *uint32 `protobuf:"varint,2,req,name=duration" json:"duration,omitempty"`
	Success          *bool   `protobuf:"varint,3,req,name=success" json:"success,omitempty"`
	ErrorCode        *string `protobuf:"bytes,4,opt,name=error_code" json:"error_code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,5,opt,name=error_message" json:"error_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Attempt) Reset()                    { *m = Attempt{} }
func (m *Attempt) String() string            { return proto.CompactTextString(m) }
func (*Attempt) ProtoMessage()               {}
func (*Attempt) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Attempt) GetDelay() uint32 {
	if m != nil && m.Delay != nil {
		return *m.Delay
	}
	return 0
}

func (m *Attempt) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Attempt) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *Attempt) GetErrorCode() string {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return ""
}

func (m *Attempt) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

type PutRecordResult struct {
	Attempts         []*Attempt `protobuf:"bytes,1,rep,name=attempts" json:"attempts,omitempty"`
	Success          *bool      `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	ShardId          *string    `protobuf:"bytes,3,opt,name=shard_id" json:"shard_id,omitempty"`
	SequenceNumber   *string    `protobuf:"bytes,4,opt,name=sequence_number" json:"sequence_number,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *PutRecordResult) Reset()                    { *m = PutRecordResult{} }
func (m *PutRecordResult) String() string            { return proto.CompactTextString(m) }
func (*PutRecordResult) ProtoMessage()               {}
func (*PutRecordResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *PutRecordResult) GetAttempts() []*Attempt {
	if m != nil {
		return m.Attempts
	}
	return nil
}

func (m *PutRecordResult) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *PutRecordResult) GetShardId() string {
	if m != nil && m.ShardId != nil {
		return *m.ShardId
	}
	return ""
}

func (m *PutRecordResult) GetSequenceNumber() string {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return ""
}

type Credentials struct {
	Akid             *string `protobuf:"bytes,1,req,name=akid" json:"akid,omitempty"`
	SecretKey        *string `protobuf:"bytes,2,req,name=secret_key" json:"secret_key,omitempty"`
	Token            *string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *Credentials) GetAkid() string {
	if m != nil && m.Akid != nil {
		return *m.Akid
	}
	return ""
}

func (m *Credentials) GetSecretKey() string {
	if m != nil && m.SecretKey != nil {
		return *m.SecretKey
	}
	return ""
}

func (m *Credentials) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type SetCredentials struct {
	ForMetrics       *bool        `protobuf:"varint,1,opt,name=for_metrics" json:"for_metrics,omitempty"`
	Credentials      *Credentials `protobuf:"bytes,2,req,name=credentials" json:"credentials,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SetCredentials) Reset()                    { *m = SetCredentials{} }
func (m *SetCredentials) String() string            { return proto.CompactTextString(m) }
func (*SetCredentials) ProtoMessage()               {}
func (*SetCredentials) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *SetCredentials) GetForMetrics() bool {
	if m != nil && m.ForMetrics != nil {
		return *m.ForMetrics
	}
	return false
}

func (m *SetCredentials) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type Dimension struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Dimension) Reset()                    { *m = Dimension{} }
func (m *Dimension) String() string            { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()               {}
func (*Dimension) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Dimension) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Dimension) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Stats struct {
	Count            *float64 `protobuf:"fixed64,1,req,name=count" json:"count,omitempty"`
	Sum              *float64 `protobuf:"fixed64,2,req,name=sum" json:"sum,omitempty"`
	Mean             *float64 `protobuf:"fixed64,3,req,name=mean" json:"mean,omitempty"`
	Min              *float64 `protobuf:"fixed64,4,req,name=min" json:"min,omitempty"`
	Max              *float64 `protobuf:"fixed64,5,req,name=max" json:"max,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Stats) GetCount() float64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Stats) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *Stats) GetMean() float64 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *Stats) GetMin() float64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Stats) GetMax() float64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

type Metric struct {
	Name             *string      `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Dimensions       []*Dimension `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty"`
	Stats            *Stats       `protobuf:"bytes,3,req,name=stats" json:"stats,omitempty"`
	Seconds          *uint64      `protobuf:"varint,4,req,name=seconds" json:"seconds,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *Metric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Metric) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Metric) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Metric) GetSeconds() uint64 {
	if m != nil && m.Seconds != nil {
		return *m.Seconds
	}
	return 0
}

type MetricsRequest struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Seconds          *uint64 `protobuf:"varint,2,opt,name=seconds" json:"seconds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MetricsRequest) Reset()                    { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()               {}
func (*MetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *MetricsRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MetricsRequest) GetSeconds() uint64 {
	if m != nil && m.Seconds != nil {
		return *m.Seconds
	}
	return 0
}

type MetricsResponse struct {
	Metrics          []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *MetricsResponse) Reset()                    { *m = MetricsResponse{} }
func (m *MetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricsResponse) ProtoMessage()               {}
func (*MetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *MetricsResponse) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*Tag)(nil), "aws.kinesis.protobuf.Tag")
	proto.RegisterType((*Record)(nil), "aws.kinesis.protobuf.Record")
	proto.RegisterType((*AggregatedRecord)(nil), "aws.kinesis.protobuf.AggregatedRecord")
	proto.RegisterType((*Message)(nil), "aws.kinesis.protobuf.Message")
	proto.RegisterType((*PutRecord)(nil), "aws.kinesis.protobuf.PutRecord")
	proto.RegisterType((*Flush)(nil), "aws.kinesis.protobuf.Flush")
	proto.RegisterType((*Attempt)(nil), "aws.kinesis.protobuf.Attempt")
	proto.RegisterType((*PutRecordResult)(nil), "aws.kinesis.protobuf.PutRecordResult")
	proto.RegisterType((*Credentials)(nil), "aws.kinesis.protobuf.Credentials")
	proto.RegisterType((*SetCredentials)(nil), "aws.kinesis.protobuf.SetCredentials")
	proto.RegisterType((*Dimension)(nil), "aws.kinesis.protobuf.Dimension")
	proto.RegisterType((*Stats)(nil), "aws.kinesis.protobuf.Stats")
	proto.RegisterType((*Metric)(nil), "aws.kinesis.protobuf.Metric")
	proto.RegisterType((*MetricsRequest)(nil), "aws.kinesis.protobuf.MetricsRequest")
	proto.RegisterType((*MetricsResponse)(nil), "aws.kinesis.protobuf.MetricsResponse")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xdf, 0x6f, 0xe3, 0x44,
	0x10, 0x4e, 0xfc, 0xa3, 0x89, 0xc7, 0x4d, 0x9b, 0xee, 0x81, 0xce, 0xc7, 0x1d, 0xba, 0x9c, 0x01,
	0x35, 0x20, 0xc8, 0x49, 0x45, 0xf0, 0x84, 0x80, 0xf6, 0x10, 0x8a, 0x84, 0x4e, 0x42, 0xbd, 0x7b,
	0x45, 0x66, 0xbb, 0x9e, 0x38, 0x56, 0xec, 0x75, 0x6e, 0x7f, 0x40, 0x0f, 0x09, 0x78, 0xe5, 0x2f,
	0xe5, 0xef, 0x40, 0xbb, 0x9b, 0x26, 0x6e, 0xcf, 0x29, 0x8f, 0x5e, 0x7f, 0xdf, 0xcc, 0x37, 0x33,
	0xdf, 0x0c, 0x1c, 0xd5, 0x28, 0x25, 0x2d, 0x50, 0xce, 0xd6, 0xa2, 0x51, 0x0d, 0x79, 0x8f, 0xfe,
	0x2e, 0x67, 0xab, 0x92, 0xa3, 0x2c, 0x37, 0x4f, 0x57, 0x7a, 0xf1, 0xc1, 0x21, 0x6b, 0xf8, 0xa2,
	0x2c, 0xdc, 0x43, 0xfa, 0x0c, 0xfc, 0xd7, 0xb4, 0x20, 0x31, 0xf8, 0x2b, 0x7c, 0x9b, 0xf4, 0x27,
	0xde, 0x34, 0x22, 0x23, 0x08, 0x7f, 0xa3, 0x95, 0xc6, 0xc4, 0x9b, 0xf4, 0xa7, 0x51, 0xfa, 0x27,
	0x1c, 0x5c, 0x22, 0x6b, 0x44, 0x4e, 0x1e, 0xc3, 0x83, 0x35, 0x15, 0xaa, 0x54, 0x65, 0xc3, 0xb3,
	0x15, 0xbe, 0xcd, 0x4a, 0x9e, 0xe3, 0xb5, 0x65, 0x05, 0xe4, 0x29, 0x3c, 0xc4, 0xeb, 0x75, 0x55,
	0xb2, 0x52, 0x65, 0x4b, 0x2a, 0x97, 0x2d, 0x80, 0x89, 0x13, 0x90, 0x43, 0x08, 0x72, 0xaa, 0x68,
	0xe2, 0x4f, 0xbc, 0xe9, 0x21, 0x39, 0x85, 0x40, 0xd1, 0x42, 0x26, 0xc1, 0xc4, 0x9f, 0xc6, 0x67,
	0x8f, 0x66, 0x5d, 0x5a, 0x67, 0xaf, 0x69, 0x91, 0xfe, 0x0d, 0xe3, 0xf3, 0xa2, 0x10, 0x58, 0x50,
	0x85, 0xf9, 0x3e, 0x21, 0x8a, 0x5e, 0x55, 0x98, 0xf4, 0x27, 0xfe, 0x34, 0xea, 0x16, 0xe2, 0x00,
	0x9e, 0x05, 0x7c, 0x01, 0x03, 0x61, 0xe3, 0xc8, 0xc4, 0xb7, 0xd9, 0x9f, 0x74, 0x67, 0x77, 0xc9,
	0xd2, 0x7f, 0x7d, 0x18, 0xbc, 0x74, 0x9d, 0x25, 0x00, 0x5e, 0x99, 0x6f, 0x0a, 0x3e, 0x81, 0x48,
	0x36, 0x5a, 0x30, 0xcc, 0xca, 0x7c, 0x53, 0xe2, 0x57, 0x00, 0x6b, 0xad, 0x32, 0x17, 0x3d, 0xf1,
	0x27, 0xfd, 0x69, 0x7c, 0xf6, 0xb4, 0x3b, 0xf8, 0xcf, 0x5a, 0xb9, 0xf8, 0xf3, 0x1e, 0xf9, 0x1c,
	0xc2, 0x45, 0xa5, 0xe5, 0x32, 0x09, 0x2c, 0xe3, 0x71, 0x37, 0xe3, 0x47, 0x03, 0x99, 0xf7, 0xc8,
	0x05, 0x9c, 0xec, 0x92, 0x64, 0x02, 0xa5, 0xae, 0x54, 0x12, 0x5a, 0xe6, 0x27, 0xff, 0x93, 0xeb,
	0xd2, 0x82, 0xe7, 0x3d, 0xf2, 0x0d, 0x8c, 0x9c, 0x0d, 0xb4, 0xa0, 0xa6, 0x89, 0xc9, 0x81, 0xe5,
	0x7f, 0xd4, 0xcd, 0x7f, 0xd1, 0x86, 0xce, 0x7b, 0xe4, 0x3b, 0x38, 0xae, 0x51, 0x89, 0x92, 0xc9,
	0x4c, 0xe0, 0x1b, 0x8d, 0x52, 0x25, 0x03, 0xcb, 0xff, 0xb8, 0x9b, 0xff, 0xd2, 0x81, 0x2f, 0x1d,
	0x76, 0xde, 0x23, 0xe7, 0x30, 0xde, 0x05, 0x90, 0xeb, 0x86, 0x4b, 0x4c, 0x86, 0xf7, 0x55, 0xb0,
	0x8d, 0xe0, 0xc0, 0x4e, 0x83, 0x44, 0x95, 0x31, 0x81, 0x39, 0x72, 0x55, 0xd2, 0x4a, 0x26, 0xd1,
	0x7d, 0x1a, 0x5e, 0xa1, 0x7a, 0xb1, 0xc3, 0xce, 0x7b, 0x17, 0x63, 0x38, 0xa2, 0x4c, 0x69, 0x5a,
	0x65, 0x9b, 0xb5, 0x49, 0x7f, 0x85, 0x68, 0xdb, 0x29, 0xf2, 0x00, 0x62, 0xa9, 0x04, 0xd2, 0x3a,
	0xe3, 0xb4, 0xc6, 0xcd, 0x66, 0xbc, 0x0f, 0xa3, 0x5b, 0xbe, 0x4b, 0x3c, 0xfb, 0xfc, 0x08, 0x4e,
	0xde, 0x71, 0x9c, 0x9d, 0x7e, 0xb4, 0x35, 0x7d, 0x60, 0x4c, 0x9f, 0x3e, 0x81, 0xd0, 0x4e, 0xf1,
	0xdd, 0xe8, 0x66, 0xd1, 0x16, 0x30, 0x38, 0x57, 0x0a, 0xeb, 0xb5, 0x32, 0x2b, 0x98, 0x63, 0x45,
	0xdd, 0x46, 0x8e, 0xc8, 0x18, 0x86, 0xf9, 0xcd, 0xa4, 0x3c, 0xfb, 0x72, 0x0c, 0x03, 0xa9, 0x19,
	0x43, 0x29, 0xed, 0x3e, 0x0d, 0x09, 0x01, 0x40, 0x21, 0x1a, 0x91, 0xb1, 0x26, 0x47, 0x6b, 0x24,
	0x2b, 0xd7, 0xbd, 0x6d, 0x2a, 0xb4, 0x2e, 0x89, 0xd2, 0xbf, 0xe0, 0xf8, 0x8e, 0x23, 0xc8, 0x73,
	0x18, 0x52, 0x97, 0x5a, 0xda, 0x2d, 0x8a, 0xcf, 0x3e, 0xec, 0x6e, 0xe3, 0x8d, 0xc0, 0x56, 0x7e,
	0xcf, 0xe6, 0x1f, 0xc3, 0x50, 0x2e, 0xa9, 0xc8, 0xcd, 0x32, 0xb8, 0xd2, 0x1f, 0x9a, 0x09, 0xbd,
	0xd1, 0xc8, 0x19, 0x66, 0x5c, 0xd7, 0x57, 0x28, 0x9c, 0xac, 0xf4, 0x5b, 0x88, 0x5b, 0xa3, 0x30,
	0x2d, 0xa2, 0xab, 0xcd, 0x56, 0x45, 0xa6, 0x0e, 0x89, 0x4c, 0xa0, 0x6a, 0xf5, 0x77, 0x04, 0xa1,
	0x6a, 0x56, 0xc8, 0x5d, 0xe0, 0xf4, 0x17, 0x38, 0xba, 0x3d, 0x4d, 0xd3, 0xce, 0x85, 0x2d, 0xd3,
	0xba, 0xc4, 0xb6, 0x73, 0x48, 0xbe, 0x86, 0xb8, 0xed, 0x0e, 0x13, 0x2a, 0x3e, 0x7b, 0xb6, 0xc7,
	0xe1, 0x3b, 0x60, 0x7a, 0x0a, 0xd1, 0x0f, 0x65, 0x8d, 0x5c, 0x96, 0x0d, 0xdf, 0x7b, 0x18, 0xbd,
	0x69, 0x94, 0xfe, 0x04, 0xe1, 0x2b, 0x45, 0x95, 0x34, 0xef, 0xac, 0xd1, 0x5c, 0x59, 0x58, 0xdf,
	0x70, 0xa4, 0xae, 0x2d, 0xa8, 0x6f, 0xaa, 0xab, 0x91, 0x72, 0x3b, 0x25, 0xfb, 0xab, 0x2e, 0xb9,
	0x75, 0x83, 0xfb, 0xa0, 0xd7, 0x49, 0x68, 0x3e, 0xd2, 0x7f, 0xfa, 0x70, 0xe0, 0x5c, 0x6e, 0x28,
	0x2d, 0xcf, 0x7d, 0x09, 0x90, 0xdf, 0xc8, 0x91, 0xf6, 0x82, 0xed, 0xbd, 0x29, 0x3b, 0xd9, 0x9f,
	0x41, 0x28, 0x8d, 0x34, 0x9b, 0x76, 0xef, 0x45, 0x71, 0xea, 0xcd, 0x28, 0x91, 0x35, 0x3c, 0x97,
	0x56, 0x57, 0x90, 0x3e, 0x87, 0xa3, 0xdb, 0x1b, 0xdb, 0x52, 0x64, 0x06, 0xdb, 0x22, 0xd8, 0xb3,
	0x97, 0x7e, 0x0f, 0xc7, 0x77, 0x16, 0xd4, 0xdc, 0xd8, 0xdd, 0x34, 0xee, 0xb9, 0xb1, 0x8e, 0x77,
	0xf1, 0x29, 0x9c, 0xb2, 0xa6, 0x9e, 0xd1, 0x9a, 0xfe, 0xd1, 0xf0, 0x3b, 0xc0, 0x5c, 0x33, 0x14,
	0x5b, 0xc6, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0xc1, 0x2b, 0x69, 0xe6, 0x06, 0x00, 0x00,
}
